use master
go
drop database OrderSchema
go
Create Database OrderSchema
go
use OrderSchema
go
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Items](
	[ItemNo] [int] NOT NULL,
	[Name] [varchar](10) NULL,
	[Price] [int] NULL,
	[Quantity in Store] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ItemNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
INSERT [dbo].[Items] ([ItemNo], [Name], [Price], [Quantity in Store]) VALUES (100, N'A', 1000, 100)
INSERT [dbo].[Items] ([ItemNo], [Name], [Price], [Quantity in Store]) VALUES (200, N'B', 2000, 50)
INSERT [dbo].[Items] ([ItemNo], [Name], [Price], [Quantity in Store]) VALUES (300, N'C', 3000, 60)
INSERT [dbo].[Items] ([ItemNo], [Name], [Price], [Quantity in Store]) VALUES (400, N'D', 6000, 400)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Customers](
	[CustomerNo] [varchar](2) NOT NULL,
	[Name] [varchar](30) NULL,
	[City] [varchar](3) NULL,
	[Phone] [varchar](11) NULL,
PRIMARY KEY CLUSTERED 
(
	[CustomerNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C1', N'AHMED ALI', N'LHR', N'111111')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C2', N'ALI', N'LHR', N'222222')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C3', N'AYESHA', N'LHR', N'333333')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C4', N'BILAL', N'KHI', N'444444')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C5', N'SADAF', N'KHI', N'555555')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C6', N'FARAH', N'ISL', NULL)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Order](
	[OrderNo] [int] NOT NULL,
	[CustomerNo] [varchar](2) NULL,
	[Date] [date] NULL,
	[Total_Items_Ordered] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[OrderNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (1, N'C1', CAST(0x7F360B00 AS Date), 30)
INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (2, N'C3', CAST(0x2A3C0B00 AS Date), 5)
INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (3, N'C3', CAST(0x493C0B00 AS Date), 20)
INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (4, N'C4', CAST(0x4A3C0B00 AS Date), 15)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OrderDetails](
	[OrderNo] [int] NOT NULL,
	[ItemNo] [int] NOT NULL,
	[Quantity] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[OrderNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (1, 200, 20)
INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (1, 400, 10)
INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (2, 200, 5)
INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (3, 200, 60)

GO

ALTER TABLE [dbo].[OrderDetails]  ADD FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Items] ([ItemNo]) on delete cascade on update cascade
GO

ALTER TABLE [dbo].[OrderDetails]   ADD FOREIGN KEY([OrderNo]) 
REFERENCES [dbo].[Order] ([OrderNo]) on delete cascade on update cascade
GO

--q1
CREATE TRIGGER customerDelete
ON [Customers]
INSTEAD OF DELETE
AS
BEGIN
    SET notcount ON;

    IF EXISTS (
        SELECT *
        FROM deleted d
        INNER JOIN [Order] order ON d.CustomerNo = order.CustomerNo
    )
    BEGIN
        RAISERROR ('can't delete customer that has at least one order', 16, 1);
    END
    ELSE
    BEGIN
        DELETE cus
        FROM Customers cus
        INNER JOIN deleted d ON cus.CustomerNo = d.CustomerNo;
    END
END

--q2
CREATE TRIGGER [InsertTrigger]
ON [OrderDetails]
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (
        SELECT *
        FROM inserted i
        JOIN [Items] items
        ON i.ItemNo = items.ItemNo
        WHERE i.[Quantity] > items.[Quantity in Store]
    )
    ELSE
    BEGIN
      PRINT 'NOT FOUND'
    END
    BEGIN
        INSERT INTO [OrderDetails] 
        SELECT [OrderNo], [ItemNo], [Quantity]
        FROM inserted
    END
END

--q3
CREATE TRIGGER [QuantityCHECK]
ON [OrderDetails]
AFTER UPDATE
AS
BEGIN
    DECLARE @itemNo INT, @QuantityNEW INT, @QuantityOLD INT, @QuantitySTORE INT
    
    SELECT @itemNo = i.itemNo, @QuantityNEW = d.Quantity, @QuantityOLD= i.QuantitySTORE
    FROM inserted d
    JOIN Items i ON i.ItemNo = d.ItemNo
    
    SELECT @QuantitySTORE = QuantityInStore FROM Items WHERE ItemNo = @itemNo
    
    IF (@QuantityNEW > @QuantitySTORE)
    BEGIN
        RAISERROR('quantity not available.back to transaction update', 16, 1)
        ROLLBACK TRANSACTION
        RETURN
    END
END

--Q4

CREATE TRIGGER [AfterDeleteTrig]
ON [Items]
AFTER DELETE
AS
BEGIN
    IF EXISTS (SELECT * FROM deleted WHERE [Quantity in Store] > 100)
    BEGIN
        RAISERROR('Cannot delete item ', 16, 1)
        ROLLBACK TRANSACTION
    END
END

--q5
CREATE TRIGGER [InsteadInsertTrigger] 
ON [Order] 
INSTEAD OF INSERT
AS 
BEGIN
    DECLARE @currDate date = GETDATE()

    INSERT INTO [Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered])
    SELECT [OrderNo], [CustomerNo],
    (CASE WHEN [Date] <> @currDate 
    THEN @currDate 
    ELSE [Date] 
    END), [Total_Items_Ordered]
    FROM inserted
END


--q6
CREATE TRIGGER [AInsertCustomer]
ON [Customers]
AFTER INSERT
AS
BEGIN
    SET notCount ON;

    IF EXISTS (SELECT * FROM inserted WHERE Name IS NULL OR City IS NULL OR Phone IS NULL)
    BEGIN
        RAISERROR ('no customer inserted', 16, 1);
        ROLLBACK TRANSACTION;
    END
END

--Q7

CREATE PROCEDURE [SignUp]
    @CustomerNo varchar(2),
    @Name varchar(30),
    @City varchar(3),
    @Phone varchar(11),
    @Flag int OUTPUT
AS
BEGIN
    SET notCount ON
    IF EXISTS (SELECT * FROM [Customers] WHERE [CustomerNo] = @CustomerNo)
    BEGIN
        SET @Flag = 1
        RETURN
    END
    IF LEN(@Phone) <> 6
    BEGIN
        SET @Flag = 3
        RETURN
    END
    INSERT INTO [Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (@CustomerNo, @Name, @City, @Phone)
    SET @Flag = 0
END

DECLARE @Flag int
EXEC [CustomerSignUp] 'C8', 'Alexander Pete', 'LHR', '123456', @Flag OUTPUT
SELECT @Flag



